{"version":3,"file":"0.eab4943dd04359330da2.hot-update.js","sources":["webpack:///./src/layouts/longread.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport cn from \"classnames\";\n\nimport { isMobile, isTablet } from \"../utils/browser\";\nimport { getProject, getBackRouteByLocationPathName, mergedRoutes } from \"../routes/utils\";\nimport { ViewportHeight } from \"../components/ViewportHeight/ViewportHeight\";\nimport { ScrollbarProvider } from \"../components/ScrollbarProvider/ScrollbarProvider\";\nimport { LongreadNavbar } from \"../components/LongreadNavbar/LongreadNavbar\";\nimport { CookieNotice } from \"../components/CookieNotice/CookieNotice\";\nimport styles from \"../styles/longread\";\n\nexport class LongreadLayout extends Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { routes: staticRoutes, location } = nextProps;\n    const { routes: prevRoutes, pages } = prevState;\n\n    const state = {};\n\n    if (prevRoutes.length === 0) {\n      return {\n        routes: mergedRoutes({ routes: staticRoutes, ...nextProps }),\n      };\n    }\n\n    if (pages.length === 0) {\n      const routes = mergedRoutes({ routes: staticRoutes, ...nextProps });\n      const projects = getProject({ allProject: true, routes }).map(({ id }) => `/${id}`);\n      const vacancy = getProject({\n        allProject: true,\n        routes,\n        parentId: \"jobs\",\n        childrenId: \"vacancy\",\n      });\n      const isPortfolioLongread = projects.some(project =>\n        project.includes(location.pathname.replace(/\\//g, \"\")),\n      );\n      const isVacancyPage = location.pathname.includes(\"vacancy\");\n\n      if (isPortfolioLongread && projects) {\n        state.pages = projects;\n      } else if (isVacancyPage && vacancy && vacancy.items) {\n        state.pages = vacancy.items.map(item => item.longreadLink);\n      }\n    }\n\n    return state;\n  }\n\n  state = {\n    routes: [],\n    pages: [],\n    isTablet: null,\n    isMobile: null,\n    currentPage: 0,\n  };\n\n  componentDidMount() {\n    this.setState({\n      isMobile: isMobile(),\n      isTablet: isTablet(),\n    });\n  }\n\n  componentDidUpdate({ location: prevLocation }, { pages: prevPages }) {\n    const { pages } = this.state;\n    const { location } = this.props;\n\n    if (prevLocation.pathname !== location.pathname || prevPages.length !== pages.length) {\n      const currentPage = pages.findIndex(page => {\n        const isVacancyPage = location.pathname.includes(\"vacancy\");\n        const pathname = decodeURI(location.pathname);\n        return isVacancyPage ? page.includes(pathname) : page.includes(pathname.split(\"/\")[1]);\n      });\n\n      this.setState({ currentPage: currentPage < 0 ? 0 : currentPage });\n    }\n  }\n\n  goBack = e => {\n    const { routes } = this.state;\n    const { location, navigate } = this.props;\n    e.preventDefault();\n\n    const isVacancyPage = location.pathname.includes(\"vacancy\");\n    const to = getBackRouteByLocationPathName(location.pathname, routes);\n\n    if (location.state && location.state.prevPathname) {\n      navigate(location.state.prevPathname);\n    } else if (isVacancyPage) {\n      navigate(to, {\n        state: { scrollTo: \"vacancy\" },\n      });\n    } else {\n      navigate(to);\n    }\n  };\n\n  render() {\n    const { pages, isMobile, isTablet, currentPage, routes } = this.state;\n    const { children, location, navigate } = this.props;\n\n    if (isTablet === null && isMobile === null) {\n      return <div style={{ display: \"none\" }} />;\n    }\n\n    return (\n      <ScrollbarProvider\n        nativeScrollbar={isMobile || isTablet}\n        location={location}\n        className={styles.scrollbar}\n        withScrollbarY\n      >\n        <Helmet\n          htmlAttributes={{\n            class: cn(isMobile || isTablet ? styles.londreadHtmlMobile : styles.longreadHtml),\n          }}\n          bodyAttributes={{\n            class: cn(isMobile || isTablet ? styles.londreadBodyMobile : styles.longreadBody),\n          }}\n        />\n        <ViewportHeight />\n        <LongreadNavbar\n          currentPage={currentPage}\n          pages={pages}\n          isMobile={isMobile}\n          nativeScrollbar={isMobile || isTablet}\n          goBack={this.goBack}\n          location={location}\n        />\n        {React.cloneElement(children, {\n          routes,\n          isMobile,\n          isTablet,\n          isMobileOrTablet: isMobile || isTablet,\n        })}\n        <CookieNotice navigate={navigate} location={location} />\n      </ScrollbarProvider>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAsCA;AACA;AACA;AACA;AACA;AALA;AACA;AAtCA;AAmEA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AArFA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AACA;AADA;AA8CA;AACA;AACA;AAFA;AAIA;AACA;AAnDA;AAoDA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAlEA;AAsFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAGA;AACA;AAhIA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;;;A","sourceRoot":""}