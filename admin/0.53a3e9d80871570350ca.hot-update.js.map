{"version":3,"file":"0.53a3e9d80871570350ca.hot-update.js","sources":["webpack:///./src/utils/dom.js"],"sourcesContent":["// cross-browser\nexport const getElementWidthAndHeight = element => {\n  if (!element) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const box = element.getBoundingClientRect();\n  const width = box.right - box.left;\n  const height = box.bottom - box.top;\n\n  return {\n    width,\n    height,\n  };\n};\n\nexport const isElementInViewport = ({ el, offsetY = 0, offsetTop = 0 }) => {\n  const { top, left, bottom, right } = el.getBoundingClientRect();\n\n  return (\n    top + offsetY - offsetTop >= 0 &&\n    left >= 0 &&\n    bottom - offsetY <= (window.innerHeight || document.documentElement.clientHeight) &&\n    right <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n};\n\nconst setVhPropertyFromOrientationChanged = () => {\n  const timeout = 120;\n  return new window.Promise(resolve => {\n    const go = (i, height0) => {\n      window.innerHeight !== height0 || i >= timeout\n        ? resolve()\n        : window.requestAnimationFrame(() => go(i + 1, height0));\n    };\n    go(0, window.innerHeight);\n  });\n};\n\nexport const setVhProperty = () => {\n  if (typeof window !== \"object\") {\n    return;\n  }\n\n  const vh = window.innerHeight * 0.01;\n\n  setVhPropertyFromOrientationChanged().then(vh => console.info(\"--> ggwp vh\", vh));\n  document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\n};\n\nexport const fillElementsInViewport = ({\n  containerElement,\n  items,\n  offsetY = 0,\n  viewportHeight,\n  inViewportOff = false,\n}) => {\n  const { bottom, height } = containerElement.getBoundingClientRect();\n\n  let itemsInViewPort = 0;\n\n  const inViewport = bottom - viewportHeight <= 0;\n\n  if (inViewport || inViewportOff) {\n    const totalAmount = inViewportOff ? height : viewportHeight - offsetY - height;\n\n    const scrolled = Math.abs(bottom - viewportHeight);\n    const diff = totalAmount - scrolled;\n    const percentageOfTotalAmount = Math.max(100 - (diff * 100) / totalAmount);\n    const percent = percentageOfTotalAmount > 100 ? 100 : percentageOfTotalAmount;\n    itemsInViewPort = inViewportOff\n      ? items - Math.round((items * percent) / 100)\n      : Math.round((items * percent) / 100);\n  } else {\n    itemsInViewPort = 0;\n  }\n\n  return itemsInViewPort;\n};\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAhFA;AAkBA;AAWA;AAYA;AAWA;;;;;;;;;;;;;A","sourceRoot":""}